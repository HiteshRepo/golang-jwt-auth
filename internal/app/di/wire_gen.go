// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/google/wire"
	"github.com/hiteshrepo/golang-jwt-auth/internal/app"
	"github.com/hiteshrepo/golang-jwt-auth/internal/app/handler"
	"github.com/hiteshrepo/golang-jwt-auth/internal/app/router"
	"github.com/hiteshrepo/golang-jwt-auth/internal/pkg/config"
	"github.com/hiteshrepo/golang-jwt-auth/internal/pkg/rate_limiter"
)

// Injectors from wire.go:

func InitializeApp(ctx context.Context) (*app.App, error) {
	appConfig, err := config.ProvideAppConfig()
	if err != nil {
		return nil, err
	}
	authHandler := handler.ProvideAuthHandler()
	userHandler := handler.ProvideUserHandler()
	engine, err := router.ProvideRouter(appConfig, authHandler, userHandler)
	if err != nil {
		return nil, err
	}
	serverConfig := appConfig.ServerConfig
	appApp := &app.App{
		GinEngine:    engine,
		ServerConfig: serverConfig,
	}
	return appApp, nil
}

// wire.go:

var configSet = wire.NewSet(config.ProvideAppConfig, wire.FieldsOf(new(*config.AppConfig), "ServerConfig"), wire.FieldsOf(new(*config.AppConfig), "RateLimiterConfig"))

var handlerSet = wire.NewSet(handler.ProvideAuthHandler, handler.ProvideUserHandler)

var repoSet = wire.NewSet()

var serviceSet = wire.NewSet()

var rateLimiterSet = wire.NewSet(rate_limiter.ProvideInMemoryLimiter)
